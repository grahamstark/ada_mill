--
-- Created by ada_generator.py on $date
-- 
with $dataPackageName;


with Ada.Containers.Vectors;

with Environment;

with DB_Commons; 
with DB_Commons.ODBC; 

with GNU.DB.SQLCLI;  
with GNU.DB.SQLCLI.Bind;
with GNU.DB.SQLCLI.Info;
with GNU.DB.SQLCLI.Environment_Attribute;
with GNU.DB.SQLCLI.Connection_Attribute;

with Ada.Exceptions;  
with Ada.Strings; 
with Ada.Strings.Wide_Fixed;
with Ada.Characters.Conversions;
with Ada.Strings.Unbounded; 
with Text_IO;
with Ada.Strings.Maps;
with Connection_Pool;

#for $withs in $localWiths
with $withs;
#end for



package body ${IOName}_Base is

   use Ada.Strings.Unbounded;
   use Ada.Exceptions;
   use Ada.Strings;

   package dodbc renames DB_Commons.ODBC;
   package sql renames GNU.DB.SQLCLI;
   package sql_info renames GNU.DB.SQLCLI.Info;
   use sql;
   use Base_Types;
   --
   -- generic packages to handle each possible type of decimal, if any, go here
   --
#for $dec in $decimalDeclarations:
   $dec;
#end for
   
   --
   -- Select all variables; substring to be competed with output from some criteria
   --
   $selectPart;
   
   --
   -- Insert all variables; substring to be competed with output from some criteria
   --
   $insertPart;

   
   --
   -- delete all the records identified by the where SQL clause 
   --
   $deletePart;
   
   --
   -- update
   --
   $updatePart;
   
   
#for $ass in $incr_integer_pk_fields
$ass
#end for

   --
   -- returns true if the primary key parts of $outputRecordName match the defaults in $nullName
   --
$isNullFunc
   
   --
   -- returns the single $outputRecordName matching the primary key fields, or the $nullName record
   -- if no such record exists
   --
$pkFunc
   
   --
   -- Retrieves a list of $outputRecordType matching the criteria, or throws an exception
   --
$retrieveByCFunc
   
   --
   -- Retrieves a list of $outputRecordType retrived by the sql string, or throws an exception
   --
$retrieveBySFunc
   
   --
   -- Update the given record 
   -- otherwise throws DB_Exception exception. 
   --
$updateFunc
   --
   -- Save the compelete given record 
   -- otherwise throws DB_Exception exception. 
   --
$saveFunc
   
   --
   -- Delete the given record. Throws DB_Exception exception. Sets value to $nullName
   --

$deleteSpecificFunc

   --
   -- delete the records indentified by the criteria
   --
   procedure Delete( c : d.Criteria ) is
   begin      
      delete( d.to_string( c ) );
      Log( "delete criteria; execute query OK" );
   end Delete;
   
   procedure Delete( where_Clause : String ) is
      ps : sql.SQLHDBC := sql.SQL_NULL_HANDLE;
      connection : dodbc.Database_Connection;
      query : Unbounded_String := DB_Commons.Add_Schema_To_Query( DELETE_PART, SCHEMA_NAME ) 
         & To_Unbounded_String(" ");
   begin
      query := query & where_Clause;
      begin -- try catch block for execute
         Log( "delete; executing query" & To_String(query) );
         connection := Connection_Pool.Lease;
         ps := dodbc.Initialise_Prepared_Statement( connection.connection, query );       
         SQLExecute( ps );
         Log( "delete; execute query OK" );
      exception 
         when Error : No_Data => Null; -- silently ignore no data exception, which is hardly exceptional
         when Error : others =>
            Log( "delete; execute query failed with message " & Exception_Information(Error)  );
            Raise_Exception( d.DB_Exception'Identity, 
               "delete: exception thrown " & Exception_Information(Error) );
      end;
      begin -- try catch block for close
         dodbc.Close_Prepared_Statement( ps );
         Connection_Pool.Return_Connection( connection );
      exception 
         when Error : others =>
            Log( "delete; execute query failed with message " & Exception_Information(Error)  );
            Raise_Exception( d.DB_Exception'Identity, 
               "delete: exception thrown " & Exception_Information(Error) );
      end;
   end Delete;


   --
   -- functions to retrieve records from tables with foreign keys
   -- referencing the table modelled by this package
   --
#for $ass in $associated:
$ass
#end for

   --
   -- functions to add something to a criteria
   --
#for $cr in $criteria
$cr
#end for
   
   --
   -- functions to add an ordering to a criteria
   --
#for $ord in $orderingStatements
$ord
#end for
   
end ${IOName}_Base;
