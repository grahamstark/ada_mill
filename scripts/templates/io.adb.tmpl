--
-- Created by ada_generator.py on $date
-- 
with $dataPackageName;


with Ada.Containers.Vectors;

with Environment;

with DB_Commons; 

#for $withs in $dbWiths
with $withs;
#end for


with Ada.Exceptions;  
with Ada.Strings; 
with Ada.Strings.Wide_Fixed;
with Ada.Characters.Conversions;
with Ada.Strings.Unbounded; 
with Text_IO;
with Ada.Strings.Maps;
with Connection_Pool;
with GNATColl.Traces;

#for $withs in $localWiths
with $withs;
#end for

-- === CUSTOM IMPORTS START ===
#for $e in $customImports 
$e 
#end for
-- === CUSTOM IMPORTS END ===

package body $IOName is

   use Ada.Strings.Unbounded;
   use Ada.Exceptions;
   use Ada.Strings;

#for $t,$f in $dbRenames.items()
   package $t renames $f;
#end for
   
#for $e in $dbUses 
   use $e;
#end for
   
   log_trace : GNATColl.Traces.Trace_Handle := GNATColl.Traces.Create( "$IOName_Upper_Case" );
   
   procedure Log( s : String ) is
   begin
      GNATColl.Traces.Trace( log_trace, s );
   end Log;
   
   
   -- === CUSTOM TYPES START ===
#for $e in $customTypes 
$e 
#end for
   -- === CUSTOM TYPES END ===

   
   --
   -- generic packages to handle each possible type of decimal, if any, go here
   --
#for $dec in $decimalDeclarations:
   $dec;
#end for


   
   --
   -- Select all variables; substring to be competed with output from some criteria
   --
   $selectPart;
   
   --
   -- Insert all variables; substring to be competed with output from some criteria
   --
   $insertPart;

   
   --
   -- delete all the records identified by the where SQL clause 
   --
   $deletePart;
   
   --
   -- update
   --
   $updatePart;
   
$errorCheck
   
#for $ass in $incr_integer_pk_fields
$ass
#end for

   --
   -- returns true if the primary key parts of $outputRecordName match the defaults in $nullName
   --
$isNullFunc
   
   --
   -- returns the single $outputRecordName matching the primary key fields, or the $nullName record
   -- if no such record exists
   --
$pkFunc

   --
   -- Returns true if record with the given primary key exists
   --
$existsFunc
   
   --
   -- Retrieves a list of $outputRecordType matching the criteria, or throws an exception
   --
$retrieveByCFunc
   
   --
   -- Retrieves a list of $outputRecordType retrived by the sql string, or throws an exception
   --
$retrieveBySFunc
   
   --
   -- Update the given record 
   -- otherwise throws DB_Exception exception. 
   --
$updateFunc
   --
   -- Save the compelete given record 
   -- otherwise throws DB_Exception exception. 
   --
$saveFunc
   
   --
   -- Delete the given record. Throws DB_Exception exception. Sets value to $nullName
   --

$deleteSpecificFunc

   --
   -- delete the records indentified by the criteria
   --
   procedure Delete( c : d.Criteria; $connectionString ) is
   begin      
      delete( d.to_string( c ), connection );
      Log( "delete criteria; execute query OK" );
   end Delete;
   
$deleteFunc

   --
   -- functions to retrieve records from tables with foreign keys
   -- referencing the table modelled by this package
   --
#for $ass in $associated:
$ass
#end for

   --
   -- functions to add something to a criteria
   --
#for $cr in $criteria
$cr
#end for
   
   --
   -- functions to add an ordering to a criteria
   --
#for $ord in $orderingStatements
$ord
#end for

$configuredInsertParamsBody

$preparedInsertStatementBody

$configuredRetrieveParamsBody

$preparedRetrieveStatementBodies

$preparedUpdateStatementBody
   
   -- === CUSTOM PROCS START ===
#for $e in $customProcs
$e 
#end for
   -- === CUSTOM PROCS END ===

end $IOName;
